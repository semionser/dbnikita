import os
from flask import Flask, render_template, request, redirect, url_for, flash, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from io import BytesIO
from threading import Thread
import pandas as pd
import telebot
from dotenv import load_dotenv
from datetime import datetime, date, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROUP_ID = int(os.getenv("TELEGRAM_GROUP_ID"))

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
if not TOKEN or not GROUP_ID:
    raise ValueError("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_GROUP_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ===
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///databasenikita.db'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = '/var/www/db1/static/uploads'  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
app.config['SECRET_KEY'] = 'your-secret-key-here'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á


db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# === Telegram Bot ===
bot = telebot.TeleBot(TOKEN)

# === –ú–æ–¥–µ–ª–∏ ===

#== –±–¥ –≤—Ö–æ–¥–∞ ===
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

#== –±–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    quantity = db.Column(db.Integer, default=0)
    image = db.Column(db.String(100), nullable=True)
    category = db.Column(db.String(100), nullable=False, default='—Ç–æ–≤–∞—Ä')

#== –±–¥ —Ç–∞—Å–∫–æ–≤ ===
class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    description = db.Column(db.Text, nullable=False)
    deadline = db.Column(db.Date, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

#== –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

#== –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±–¥ ==
def create_admin_user():
    if not User.query.filter_by(username='adm').first():
        hashed_password = generate_password_hash('1234')
        db.session.add(User(username='adm', password=hashed_password))
        db.session.commit()


# === –ú–∞—Ä—à—Ä—É—Ç—ã ===

#== –∏–Ω–¥–µ–∫—Å===
@app.route("/", methods=["GET"])
def index():
    search_query = request.args.get('search', '').strip().lower()
    all_products = Product.query.all()

    if search_query:
        products = [product for product in all_products if search_query in product.name.lower()]
    else:
        products = all_products

    return render_template("index.html", products=products)


#== –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===
@app.route('/update/<int:product_id>', methods=['POST'])
@login_required
def update_quantity(product_id):
    product = Product.query.get_or_404(product_id)
    new_quantity = request.form.get('quantity')
    if new_quantity.isdigit():
        product.quantity = int(new_quantity)
        db.session.commit()
    return redirect(url_for('index'))


#== —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===
@app.route('/delete/<int:product_id>', methods=['POST'])
@login_required
def delete_product(product_id):
    product = Product.query.get_or_404(product_id)
    db.session.delete(product)
    db.session.commit()
    return redirect(url_for('index'))


#== –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===
@app.route('/add', methods=['GET', 'POST'])
@login_required
def add_product():
    if request.method == 'POST':
        name = request.form['name']
        quantity = int(request.form['quantity'])
        category = request.form['category']
        image_file = request.files['image']
        filename = None
        if image_file:
            filename = secure_filename(image_file.filename)
            image_file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        new_product = Product(name=name, quantity=quantity, category=category, image=filename)
        db.session.add(new_product)
        db.session.commit()
        return redirect(url_for('index'))
    return render_template('add_product.html')


#== –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è===
@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form['username']).first()
        if user and check_password_hash(user.password, request.form['password']):
            login_user(user)
            return redirect(url_for('index'))
        error = '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
    return render_template('login.html', error=error)



#== –≤—ã—Ö–æ–¥ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ===
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))


#==  –¢–∞—Å–∫–∏ ===
NAMES = ['–í–∞—Å—è', '–°–µ–º–∞', '–†–æ–º–∞']

@app.route('/tasks', methods=['GET', 'POST'])
@login_required
def tasks():
    if request.method == 'POST':
        name = request.form.get('name')
        description = request.form.get('description')
        deadline_str = request.form.get('deadline')

        if not (name and description and deadline_str):
            flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã')
            return redirect(url_for('tasks'))

        try:
            deadline = datetime.strptime(deadline_str, '%Y-%m-%d').date()
        except ValueError:
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.')
            return redirect(url_for('tasks'))

        new_task = Task(name=name, description=description, deadline=deadline)
        db.session.add(new_task)
        db.session.commit()
        flash('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        return redirect(url_for('tasks'))

    tasks_list = Task.query.order_by(Task.deadline).all()
    today = date.today()

    now = datetime.now()
    next_send_time = datetime.combine(now.date(), datetime.strptime("10:00", "%H:%M").time())
    if now > next_send_time:
        next_send_time += timedelta(days=1)
    hours_until_send = (next_send_time - now).seconds // 3600

    return render_template('tasks.html', tasks=tasks_list, today=today, names=NAMES, hours_until_send=hours_until_send)


@app.route('/tasks/delete/<int:task_id>', methods=['POST'])
@login_required
def delete_task(task_id):
    task = Task.query.get_or_404(task_id)
    db.session.delete(task)
    db.session.commit()
    flash('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞')
    return redirect(url_for('tasks'))


@app.route('/notify_tasks', methods=['POST'])
@login_required
def notify_tasks():
    send_task_info()
    flash('–ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram-–≥—Ä—É–ø–ø—É!')
    return redirect(url_for('tasks'))


def send_task_info():
    with app.app_context():
        tasks = Task.query.order_by(Task.deadline).all()
        today = date.today()
        if not tasks:
            bot.send_message(chat_id=GROUP_ID, text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            return

        msg = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n\n"
        for task in tasks:
            days_left = (task.deadline - today).days
            if days_left < 0:
                status = "‚õîÔ∏è *–ü–†–û–°–†–û–ß–ï–ù–û*"
            elif days_left == 0:
                status = "‚ö†Ô∏è *–°–µ–≥–æ–¥–Ω—è*"
            elif days_left == 1:
                status = f"‚ùóÔ∏è *{days_left} –¥–µ–Ω—å –æ—Å—Ç–∞–ª—Å—è*"
            else:
                status = f"‚è≥ {days_left} –¥–Ω."

            msg += f"*{task.name}* ‚Äî {task.description}\n–î–æ {task.deadline.strftime('%Y-%m-%d')} ({status})\n\n"

        bot.send_message(chat_id=GROUP_ID, text=msg, parse_mode='Markdown')


# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 11:00 ===
scheduler = BackgroundScheduler(timezone=timezone('Europe/Moscow'))

@scheduler.scheduled_job('cron', hour=10, minute=0)
def scheduled_task_sender():
    with app.app_context():
        send_task_info()

#== –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ===
@app.route('/analytics')
@login_required
def analytics():
    products = Product.query.all()
    total_goods_quantity = sum(p.quantity for p in products if p.category == '—Ç–æ–≤–∞—Ä')
    added_goods_count = sum(1 for p in products if p.category == '—Ç–æ–≤–∞—Ä')
    added_stationery_count = sum(1 for p in products if p.category == '–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è')
    return render_template('analytics.html',
                           total_goods_quantity=total_goods_quantity,
                           added_goods_count=added_goods_count,
                           added_stationery_count=added_stationery_count)


#== —ç–∫—Å–ª–µ—å –∫–Ω–æ–ø–∫–∞ ===
@app.route('/download_excel')
@login_required
def download_excel():
    products = Product.query.all()
    rows = []
    goods = [p for p in products if p.category == '—Ç–æ–≤–∞—Ä']
    stationery = [p for p in products if p.category == '–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è']
    if goods:
        rows += [['–¢–æ–≤–∞—Ä—ã'], ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']]
        rows += [[p.name, p.quantity] for p in goods]
    if stationery:
        rows += [[], ['–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è'], ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']]
        rows += [[p.name, p.quantity] for p in stationery]
    df = pd.DataFrame(rows)
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, header=False, sheet_name='–°–∫–ª–∞–¥')
    output.seek(0)
    return send_file(output, as_attachment=True, download_name="products.xlsx",
                     mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")


#== —Ç–µ–ª–µ–≥—Ä–∞–º –∫–Ω–æ–ø–∫–∞ ===
@app.route('/notify_stock', methods=['POST'])
@login_required
def notify_stock():
    send_stock_info()
    flash('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram-–≥—Ä—É–ø–ø—É!')
    return redirect(url_for('analytics'))


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º  ===
def send_stock_info():
    with app.app_context():
        products = Product.query.all()
        goods = [p for p in products if p.category == '—Ç–æ–≤–∞—Ä']
        stationery = [p for p in products if p.category == '–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è']
        msg = "–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        if goods:
            msg += "–¢–æ–≤–∞—Ä—ã:\n" + "\n".join(f"- {p.name}: {p.quantity}" for p in goods)
        if stationery:
            msg += "\n\n–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è:\n" + "\n".join(f"- {p.name}: {p.quantity}" for p in stationery)
        bot.send_message(chat_id=GROUP_ID, text=msg)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–æ—Å—Ç–∞—Ç–∫–∏ –≤ Telegram ===
@bot.message_handler(commands=['–æ—Å—Ç–∞—Ç–∫–∏'])
def handle_stock_command(message):
    if message.chat.id == GROUP_ID:
        send_stock_info()


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ ===
def run_bot():
    bot.polling(none_stop=True)

scheduler.start()
if __name__ == '__main__':
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    with app.app_context():
        db.create_all()
        create_admin_user()
    Thread(target=run_bot).start()
    app.run(host='0.0.0.0', port=5000)